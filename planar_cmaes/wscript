#! /usr/bin/env python
import sys
sys.path.insert(0, sys.path[0]+'/waf_tools')

import os
import sferes
import planar_dart



def options(opt):
    opt.load('planar_dart')

def configure(conf):
    #conf.get_env()['BUILD_GRAPHIC'] = False

    conf.load('planar_dart')
    conf.check_planar_dart()


def _build_individual_damagetest(bld):
	take_compl=["-DTAKE_COMPLEMENT"]
	libs = 'PLANAR_DART DART EIGEN BOOST_DART BOOST TBB '
	cxxflags = bld.get_env()['CXXFLAGS']
	if os.environ.get('BUILD_GRAPHIC',"False") == "True":
		cxxflags+=["-DGRAPHIC"]
		libs += 'DART_GRAPHIC'

	cxxflags+=["-DINDIVIDUAL_DAMAGE"]
	tag="test_individual"
	cxxflags+=['-g']
	#meta
	sferes.create_variants(bld,
								source = 'planarCMAES.cpp',
								use = 'sferes2',
								uselib = libs,
								target = tag+'_damage_meta',
								cxxflags = take_compl +  cxxflags + ['-DTEST','-march=native',"-DEXPERIMENT_TYPE=0","-DNUM_CORES=1"],   # damage
								variants = ['BINARY'])
    #random
	sferes.create_variants(bld,
								source = 'planarCMAES.cpp',
								use = 'sferes2',
								uselib = libs,
								target = tag+'_damage_random',
								cxxflags = take_compl +  cxxflags + ['-DTEST','-march=native',"-DEXPERIMENT_TYPE=1","-DNUM_CORES=1"],   # damage
								variants = ['BINARY'])

	#control
	sferes.create_variants(bld,
							source = 'planarCMAES.cpp',
							use = 'sferes2',
							uselib = libs,
							target = tag+'_damage_control',
							cxxflags = take_compl +  cxxflags + ['-DTEST','-march=native',"-DEXPERIMENT_TYPE=2","-DNUM_CORES="+str(os.environ.get('NUM_CORES',"1"))],   # damage
							variants = ['BINARY'])

	#cmaes_check
	sferes.create_variants(bld,
							source = 'planarCMAES.cpp',
							use = 'sferes2',
							uselib = libs,
							target = tag+'_damage_cmaescheck',
							cxxflags = take_compl +  cxxflags + ['-DTEST','-march=native',"-DEXPERIMENT_TYPE=3","-DNUM_CORES="+str(os.environ.get('NUM_CORES',"1"))],   # damage
							variants = ['BINARY'])



def _build_test(bld, take_compl=[]):
	libs = 'PLANAR_DART DART EIGEN BOOST_DART BOOST TBB '
	cxxflags = bld.get_env()['CXXFLAGS']
	if take_compl:
		tag="test"
	else:
		tag="train"

	if os.environ.get('BUILD_GRAPHIC',"False") == "True":
		cxxflags+=["-DGRAPHIC"]
		libs += 'DART_GRAPHIC'

	cxxflags+=['-g']
	#meta
	sferes.create_variants(bld,
								source = 'planarCMAES.cpp',
								use = 'sferes2',
								uselib = libs,
								target = tag+'_damage_meta',
								cxxflags = take_compl +  cxxflags + ['-DTEST','-march=native',"-DEXPERIMENT_TYPE=0","-DNUM_CORES=1"],   # damage
								variants = ['BINARY'])
    #random
	sferes.create_variants(bld,
								source = 'planarCMAES.cpp',
								use = 'sferes2',
								uselib = libs,
								target = tag+'_damage_random',
								cxxflags = take_compl +  cxxflags + ['-DTEST','-march=native',"-DEXPERIMENT_TYPE=1","-DNUM_CORES=1"],   # damage
								variants = ['BINARY'])
	#control
	sferes.create_variants(bld,
							source = 'planarCMAES.cpp',
							use = 'sferes2',
							uselib = libs,
							target = tag+'_damage_control',
							cxxflags = take_compl +  cxxflags + ['-DTEST','-march=native',"-DEXPERIMENT_TYPE=2","-DNUM_CORES="+str(os.environ.get('NUM_CORES',"1"))],   # damage
							variants = ['BINARY'])


def _build_evolution(bld):
	libs = 'PLANAR_DART DART EIGEN BOOST_DART BOOST TBB '
	cxxflags = bld.get_env()['CXXFLAGS']
	cxxflags+=['-g']
	num_cores = os.environ.get('NUM_CORES',1)
	if os.environ.get('BUILD_GRAPHICS',"False") == "True":
		cxxflags+=["-DGRAPHIC"]
		libs += 'DART_GRAPHIC'
	ADDITIONAL_GENES = os.environ.get('ADDITIONAL_GENES',"0")
	#define LINEAR 0
	#define SELECTION 1
	#define NONLINEAR 2
	featuremaps = {0: 'linfm',1: 'selectionfm', 2: 'nonlinfm'}
	if os.environ.get('BUILD_TYPE',"False") == "damage_meta":
		for key, val in featuremaps.items():
			if ADDITIONAL_GENES == 0:
				sferes.create_variants(bld,
									source = 'planarCMAES.cpp',
									use = 'sferes2',
									uselib = libs,
									target = 'planarCMAES_damage_meta_'+val,
									cxxflags = cxxflags + ['-march=native',"-DBEHAV_DIM=4",
									"-DEXPERIMENT_TYPE=0",
									"-DNUM_CORES="+str(num_cores),
									"-DFEATUREMAP="+str(key),
									"-DADDITIONAL_GENES="+ADDITIONAL_GENES],   # -march=native
									variants = ['BINARY'])
			else:
				sferes.create_variants(bld,
									source = 'planarCMAES.cpp',
									use = 'sferes2',
									uselib = libs,
									target = 'planarCMAES_damage_meta_'+val+"_added"+ADDITIONAL_GENES+"genes",
									cxxflags = cxxflags + ['-march=native',"-DBEHAV_DIM=4",
									"-DEXPERIMENT_TYPE=0",
									"-DNUM_CORES="+str(num_cores),
									"-DFEATUREMAP="+str(key),
									"-DADDITIONAL_GENES="+ADDITIONAL_GENES],   # -march=native
									variants = ['BINARY'])

	elif os.environ.get('BUILD_TYPE',"False") == "random": 
		for key, val in featuremaps.items():
			sferes.create_variants(bld,
								source = 'planarCMAES.cpp',
								use = 'sferes2',
								uselib = libs,
								target = 'planarCMAES_random_'+val,
								cxxflags = cxxflags + ['-march=native',"-DBEHAV_DIM=4",
								"-DEXPERIMENT_TYPE=1","-DNUM_CORES="+str(num_cores),
								"-DFEATUREMAP="+str(key)],   # -march=native
								variants = ['BINARY'])
	else:
		control_conditions={"control2D":2,"control4D":4,"control6D":6}
		for c in control_conditions:
			sferes.create_variants(bld,
								source = 'planarCMAES.cpp',
								use = 'sferes2',
								uselib = libs,
								target = 'planarCMAES_'+c,
								cxxflags = cxxflags + ['-march=native','-DBEHAV_DIM='+str(control_conditions[c]),
								"-DEXPERIMENT_TYPE=2","-DNUM_CORES="+str(num_cores)],   # -march=native
								variants = ['BINARY'])
def build(bld):
	
	if os.environ.get('BUILD_PHASE',"") == "TEST":
		_build_test(bld,take_compl=["-DTAKE_COMPLEMENT"])
	elif os.environ.get('BUILD_PHASE',"") == "TRAIN":
		_build_test(bld)
	elif os.environ.get('BUILD_PHASE',"") == "INDIVIDUAL_DAMAGE":
		_build_individual_damagetest(bld)
	else:
		_build_evolution(bld)
       

    # if bld.get_env()['BUILD_GRAPHIC'] == True:
    #   sferes.create_variants(bld,
    #                          source = 'hexa_duty.cpp',
    #                          use = 'sferes2',
    #                          uselib = graphic_libs,
    #                          cxxflags = cxxflags + ['-march=native'],
    #                          target = 'hexa_duty',
    #                          variants = ['GRAPHIC'])
